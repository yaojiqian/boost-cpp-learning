//PointersReferences.cpp
//
//Pointers and References
//

#include <boost/archive/text_iarchive.hpp>
#include <boost/archive/text_oarchive.hpp>
#include <sstream>
#include <iostream>

/*---------------------------------------------------------------------------
//8. Serializing pointers

std::stringstream ss;
class animal
{
public:
	animal() = default;
	animal(int legs) :legs_{ legs } {}
	int legs() const { return legs_; }

private:
	friend class boost::serialization::access;

	template<typename Archive>
	void serialize(Archive &ar, const unsigned int version)
	{
		ar & legs_;
	}

	int legs_;
};

void save()
{
	boost::archive::text_oarchive oa{ ss };
	animal *a = new animal{ 4 };
	oa << a;
	std::cout << std::hex << a << std::endl;
	delete a;

	//std::cout << ss.str() << std::endl;
}

void load()
{
	boost::archive::text_iarchive ia{ ss };
	animal *a;
	ia >> a;
	std::cout << std::hex << a << '\n';
	std::cout << std::dec << a->legs() << '\n';
	delete a;
}

/*---------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------
//9. Serializing smart pointers
#include <boost/serialization/scoped_ptr.hpp>
#include <boost/scoped_ptr.hpp>

using namespace boost::archive;

class animal
{
public:
	animal() = default;
	animal(int legs) :legs_{ legs } {}
	int legs()const { return legs_; }
private:
	friend class boost::serialization::access;

	template<typename Archive>
	void serialize(Archive &ar, const signed int version) { ar&legs_; }

	int legs_;
};

std::stringstream ss;

void save()
{
	text_oarchive oa{ ss };
	boost::scoped_ptr<animal> a{ new animal{5} };
	oa << a;
}

void load()
{
	text_iarchive ia{ ss };
	boost::scoped_ptr<animal> a;
	ia >> a;
	std::cout << a->legs() << std::endl;
}
/*---------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------*/
//10. Serializing references
using namespace boost::archive;

class animal
{
public:
	animal() = default;
	animal(int legs) :legs_{ legs } {}
	int legs()const { return legs_; }
private:
	friend class boost::serialization::access;

	template<typename Archive>
	void serialize(Archive &ar, const signed int version) { ar&legs_; }

	int legs_;
};

std::stringstream ss;

void save()
{
	text_oarchive oa{ ss };
	animal a{ 8 };
	animal &r = a;
	oa << r;
}

void load()
{
	text_iarchive ia{ ss };
	animal a;
	animal &r = a;
	ia >> a;
	std::cout << r.legs() << std::endl;
	std::cout << a.legs() << std::endl;
}

/*---------------------------------------------------------------------------*/

int main()
{
	save();
	load();

	std::cout << "\npress a key to exit";
	std::getchar();
	return 0;
}